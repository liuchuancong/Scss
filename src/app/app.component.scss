//创建一个scss项目 ng new sassy-project --style=sass
// 需要下载 npm install node-sass  --save-dev


//或者修改你的.angular.json
// architect": {
//   "build": {
//     "builder": "@angular-devkit/build-angular:browser",
//     "options": {
//       "outputPath": "dist/demo",
//       "index": "src/index.html",
//       "main": "src/main.ts",
//       "polyfills": "src/polyfills.ts",
//       "tsConfig": "src/tsconfig.app.json",
//       "assets": [
//         "src/favicon.ico",
//         "src/assets"
//       ],
//       "styles": [
//         "src/styles.scss"  <-----------------------
//       ],
//       "scripts": []
//     },



#main {
  width: 97%;
  p,
  div {
    //可以嵌套
    font-size: 2em;
    a {
      font-weight: bold;
    }
  }
  pre {
    font-size: 3em;
  } //&代表 #main
  &-sidebar {
    border: 1px solid black;
    font-size: 15px;
  }
}

a {
  //& 支持伪元素
  font-weight: bold;
  text-decoration: none;
  &:hover {
    text-decoration: underline;
  }
  & {
    font-weight: normal;
  }
}

.funky {
  font: {
    //一类的可以嵌套
    family: fantasy;
    size: 2em;
    weight: bold
  }
}

.tom {
  // 可以用运算符
  font: 20px / 24px fantasy;
  font-weight: 500
}

$version: "1.2.3";
/* This CSS is generated by My Snazzy Framework version #{$version}. */

// 可以使用sass变量 例如 $width: 5em
$width: 15em;
$red: red;
$font-size: 3em;
.content {
  width: $width;
  color: $red;
  font-size: $font_size; //$font-size等同于$font_size
  &::before {}
}

@mixin message($selector) {
  #{$selector}:before {
    content: "Hi, Firefox users!";
  } //#代表 插值 选择器或者属性 
}

@mixin large-text {
  font: {
    family: Arial;
    size: 20px;
    weight: bold;
  }
  color: #ff0000;
}

.large-text {
  @include large-text();
}

@include message(".content");
//支持函数写法  @mixin定义函数    @include引用该 注意：定义需要在应用之前
$name: exp;
$attr: font;
p.#{$name} {
  #{$attr}: {
    size: 2em;
    weight: 500;
  }
}

$operator: operators;
//#{#xxx}可以带表插值或者属性
//使用运算符
p.#{$operator} {
  #{$attr}-size: (0px+10px/2px)*2; // font: 10px/8px;
  $width: 1000px;
  width: $width/2;
  width: round(1005)/2+0px;
  height: $width/5;
  margin-left: (5px+10px/2px)*2; // font: (italic bold 10px/8px);
  background: $red; //支持编程写法，注意运算的时候会将单位运算调 故需要添加 +0px
}

.plain {
  $line-height: 15px;
  $font-size: 30px;
  font-size: $font-size / $line-height+10px;
}

$var: -42px;
.reback {
  color: #010203 + #040506;
  font-size: (10px + (-$var));
}

// a - b 和 a + (-b) 一样 颜色也可以相加
.color {
  color: rgba(255, 58, 0, 0.75) - rgba(0, 10, 44, 0.75); //rgba alpha值必须一样 否则报错~~ 当相加的值大于255时默认255,小于0 就是0
}

.str {
  cursor: e + -resize; //+ 也可以字符串连接 这里-表示字符串不为减运算  可以理解数字相关为运算
}

$time: 40;
$value: '    ';
.str::before {
  content: "Foo "+Bar+"I ate #{$time + $value} pies!"; //空格没用
  font-family: sans- + "serif"; //前面是字符串 后面不是就是前面的类型
}

.and {
  $selector: &; //是当前的父选择器
}

@mixin does-parent-exist {
  @if & {
    &:hover {
      color: red;
    }
  }
  @else {
    a {
      color: red;
      font-size: 18px;
    }
  }
}

@include does-parent-exist();
$content: '445544554';
$content: "Non-null content" !default;

#contain::before {
  content: $content;
  //$content是NULL的话  内容是Non-null content  若$content是数字的话，无效
}
// @import "foo.scss";
//引入文件
// @import "http://foo.com/bar";
// $family: unquote("Droid+Sans");
// @import url("http://fonts.googleapis.com/css?family=#{$family}");
// 插值的导入
//css 域内导入
//  #main {
//   @import "example";
// }
.sidebar {
  width: 300px;
  @media screen and (orientation: landscape) {
    width: 500px;
  }
}

.error {
  border: 1px #f00;
  background-color: greenyellow;
}
.seriousError {
  @extend .error;
  border-width: 3px;
}

//@extend 继承

.hoverlink {
  @extend a:hover;
  @extend .error;
}


//此处引用 可以继承多个扩展 支持链式 
// @mixin does-parent-exist {
//   @if & {
//     &:hover {
//       color: red;
//     }
//   }
//   @else {
//     a {
//       color: red;
//     }
//   }
// }
#context a%extreme {
  color: blue;
  font-weight: bold;
  font-size: 2em;
}

.notice {
  @extend %extreme;
  //%extreme 表示占位
}

.parent {
  font-size: 15px;
  @at-root .child { 
      color: aquamarine
   }
}
//@at-root at-root只排除选择器
//@debug  调试debug使用

//sass里面也可以使用循环函数

$grid-width: 40px;
$gutter-width: 10px;

@function grid-width($n) {
  @return $n * $grid-width + ($n - 1) * $gutter-width;
}

#sidebar { width: grid-width(5); }

// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins   如需深入了解 请点击链接